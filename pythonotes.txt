list数据类型：
eg；classmates=['Michael','Bob','Tracy']
len()可以获得list元素个数：len(classmates)
把元素插到指定位置：classmates.insert(1,'Jack')
pop()删除list的元素:classmates.pop(1)
替换某个元素：classmates[1]='Sarah'
追加元素到末尾：classmates.append('Adam')

tuple数据类型：
tuple一旦初始化就不能修改
eg；classmates=('Machael','Bob','Tracy')
如果定义一个只有一个元素的tuple，需要这么定义：t=(1,)

for x in... for循环

dict 	
dict：python内置字典，dict的key必须是不可变对象
eg：>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	>>> d['Michael']
	95
避免key不存在错误
1，通过in判断key是否存在
	>>> 'Thomas' in d
	False
2，通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
	>>> d.get('Thomas')
	>>> d.get('Thomas', -1)
	-1
要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
	>>> d.pop('Bob')
	75
	>>> d
	{'Michael': 95, 'Tracy': 85}

set
set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
要创建一个set，需要提供一个list作为输入集合：
	>>> s = set([1, 2, 3])
	>>> s
	{1, 2, 3}
注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。
重复元素在set中自动被过滤：
	>>> s = set([1, 1, 2, 2, 3, 3])
	>>> s
	{1, 2, 3}
通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：
	>>> s.add(4)
	>>> s
	{1, 2, 3, 4}
	>>> s.add(4)
	>>> s
	{1, 2, 3, 4}
通过remove(key)方法可以删除元素：
	>>> s.remove(4)
	>>> s
	{1, 2, 3}
set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
	>>> s1 = set([1, 2, 3])
	>>> s2 = set([2, 3, 4])
	>>> s1 & s2
	{2, 3}
	>>> s1 | s2
	{1, 2, 3, 4}
